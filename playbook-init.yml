#!/usr/bin/env ANSIBLE_NOCOWS=1 ansible-playbook
- hosts: localhost
  connection: local
  gather_facts: yes
  vars_files:
    - "arch/{{ansible_architecture }}.yaml"
  vars:
    - current_user: "{{ lookup('env', 'USER') }}"
    - temp_folder: "/tmp/pimp_my_temp"
    - dotfiles_folder: "~/opt/dotfiles"
    - pip3_packages:
      - PyYAML
      - tldr
      # - localstack
    - brew_repositories:
      - homebrew/cask-fonts
    - brew_packages:
      - ansible-lint
      - autojump
      - awscli
      - bash
      - fzf
      - bash-completion
      - bash-git-prompt
      - ccze
      - coreutils
      - docker-completion
      - docker-compose-completion
      - gh
      - git
      - gpg
      - gradle-completion
      - grc
      - htop
      - httpie
      - jq
      - k9s
      - lynx
      - maven
      - maven-completion
      - mc
      - mdp
      - micro
      - most
      - mtr
      - nano
      - ncdu
      - nmap
      - pip-completion
      - pv
      - tree
      - vagrant-completion
      - watch
      - wget
      - youtube-dl
      - yq
      - diff-so-fancy
      - dty1er/tap/kubecolor
      - bat
      - exa
      - lazygit
      - lsd
      - duf
      - dust
      - rs/tap/curlie
      - eksctl
      - pinentry-mac
      - minikube
      - rsync
      - helm
      - terraform
      - yt-dlp
      - jless
      - ffmpeg
      - glow
      - dbeaver-community
      - tmux
      # - copyq
    - brew_casks:
      - vagrant
      - font-hack-nerd-font
      - firefox
      - vlc
      - xnviewmp
      - keepassxc
      - apptivate
    - dmg_files:
      - name: Idea
        url: https://download.jetbrains.com/idea/ideaIC-2019.3.4-jbr8.dmg
        filename: ideaIC-2019.3.4-jbr8.dmg
      - name: keepass
        url: https://github.com/keepassxreboot/keepassxc/releases/download/2.5.4/KeePassXC-2.5.4.dmg
        filename: KeePassXC-2.5.4.dmg
      - name: Telegram
        url: https://telegram.org/dl/desktop/mac
        filename: telegram_latest.dmg
      - name: teamviewer
      - name: VOX
      - name: krita
        website: https://krita.org/en/
    - applications:
      - name: iTerm
        url: https://iterm2.com/downloads/stable/iTerm2-3_3_9.zip
        filename: iTerm2-3_3_9.zip
        need_unpack: yes
      - name: VSCode
        url: https://go.microsoft.com/fwlink/?LinkID=620882
        filename: vscode.zip
        need_unpack: yes
      - name: Sourcetree
        url: tbd
        filename: tbd
      - name: CheatSheet
        url: https://www.mediaatelier.com/CheatSheet/
        filename: tbd
      - name: Choosy
        url: tbd
        filename: tbd
      - name: https://www.macmenubar.com/dozer/
    - vscode_extentions:
      - aaron-bond.better-comments
      - adammaras.overtype
      - andyyaldoo.vscode-json #unescape/format json
      - chrmarti.ssh
      - coolbear.systemd-unit-file
      - devmike.mikrotik-routeros-script
      - efanzh.graphviz-preview
      - esbenp.prettier-vscode
      - fabiospampinato.vscode-todo-plus
      - haaaad.ansible
      - hashicorp.terraform
      - hoovercj.vscode-power-mode
      - kelvin.vscode-sshfs
      - lamartire.git-indicators
      - leodevbro.blockman
      - marcostazi.vs-code-vagrantfile
      - mrmlnc.vscode-apache
      - mrmlnc.vscode-duplicate
      - ms-azuretools.vscode-docker
      - ms-kubernetes-tools.vscode-kubernetes-tools
      - nobuhito.printcode
      - qinjia.filenamecomplete
      - redhat.vscode-yaml
      - samverschueren.final-newline
      - shanoor.vscode-nginx
      - shardulm94.trailing-spaces
      - stephanvs.dot
      - timonwong.ansible-autocomplete
      - wholroyd.jinja
      - yzhang.markdown-all-in-one
    - vscode_extentions_disabled:
      - freakone.cursoruler
      - geeebe.duplicate
      - james-yu.latex-workshop
    - bash_dotfiles:
        - template: bash/bash.bashrc
          filename: "{{ dotfiles_folder }}/.bash_profile"
          linkname: "~/.bash_profile"
        - template: bash/grc.bashrc
          filename: "{{ dotfiles_folder }}/grc.bashrc"
          linkname: "~/.grc.bashrc"
        - template: bash/inputrc.bashrc
          filename: "{{ dotfiles_folder }}/.inputrc"
          linkname: "~/.inputrc"
    - git_dotfiles:
        - template: "git/gitconfig"
          filename: "{{ dotfiles_folder }}/.gitconfig"
          linkname: "~/.gitconfig"
        - template: "git/gitignore_global"
          filename: "{{ dotfiles_folder }}/.gitignore_global"
          linkname: "~/.gitignore_global"
        - template: "git/gitmessage"
          filename: "{{ dotfiles_folder }}/.gitmessage"
          linkname: "~/.gitmessage"



  tasks:
    - name: Create needed folders
      tags:
        - always
        - folders
      file:
        path: "{{ item }}"
        state: directory
        mode: '750'
      with_items:
        - "{{ temp_folder }}"
        - "~/develop"
        - "~/tmp"
        - "~/opt"
        - "{{ dotfiles_folder }}"
        - "~/Documents/pictures/screenshots" # for screenshots

    - name: Setup needed brew repositories
      tags: brew
      community.general.homebrew_tap:
        name: "{{ item }}"
        state: present
      with_items: "{{ brew_repositories }}"
    - name: Setup needed brew packages
      tags: brew
      homebrew:
        name: "{{ item }}"
        state: present
      with_items: "{{ brew_packages }}"
    - name: Setup needed brew casks
      tags:
        - brew
        - brew_casks
      homebrew_cask:
        name: "{{ item }}"
        state: present
      with_items: "{{ brew_casks }}"

    - name: Setup needed PIP3 packages
      tags: pip
      pip:
        name: "{{ item }}"
        state: present
      with_items: "{{ pip3_packages }}"

    - name: Collect projects folders
      tags:
        - always
        - projects
        - projects_folders
      find:
        paths: projects
        recurse: no
        file_type: any
      register: projects_folders

    - name: Collect projects data
      tags:
        - always
        - projects
        - projects_data
      set_fact:
          projects_data: "{{ projects_data|default([]) + [ {
            'dir': item.path,
            'name'  : item.path|basename,
            'project_vars': lookup('fileglob', item.path+'/project_vars.yaml'),
            'ssh_config': lookup('fileglob', item.path+'/ssh_config'),
            'ssh_config_data': lookup('file', item.path+'/ssh_config', errors='ignore')| default(''),
            'bashrc': lookup('fileglob', item.path+'/project.bashrc'),
            'gitconfig': lookup('fileglob', item.path+'/gitconfig'),
            }
            ] }}"
      loop: "{{ projects_folders.files }}"
      loop_control:
        label: "{{ item.path }}"

    - name: Register project vars
      tags:
        - always
        - projects
        - projects_vars
      include_vars:
        file: "{{ item.project_vars }}"
        name: "{{ item.name }}"
      loop: "{{ projects_data }}"
      loop_control:
        label: "{{ item.project_vars }}"

    - name: Create dotfiles projects folders
      tags:
        - folders
        - always
      file:
        path: "{{ dotfiles_folder }}/projects/{{ item.name }}"
        state: directory
        mode: '750'
      loop: "{{ projects_data }}"
      loop_control:
        label: "{{ item.name }}"
    - name: Debug projects data
      tags:
        - never
        - debug3
      debug:
        var: projects_data
    - name: Enforce bash shell
      tags:
        - bash_shell
      block:
        - name: Ensure bash is set as user shell for user "{{ current_user }}"
          tags:
            - never
          become: yes
          user:
            name: "{{ current_user }}"
            shell: /bin/bash

    - name: Populate bash profile
      tags: bash
      block:
        # By default, macos use login shell every time
        # https://apple.stackexchange.com/questions/51036/what-is-the-difference-between-bash-profile-and-bashrc
        # On OS X, Terminal by default runs a login shell every time, so this is a little different to most other systems, but you can configure that in the preferences.
        - name: Template projects bash dotfiles
          template:
            src: "{{ item.bashrc }}"
            dest: "{{ dotfiles_folder }}/projects/{{ item.name }}/project.bashrc"
            mode: '644'
          loop: "{{ projects_data }}"
          when: item.bashrc
          loop_control:
            label: "{{ item.name }}"

        - name: Template bash dotfiles
          template:
            src: "{{ item.template }}"
            dest: "{{ item.filename }}"
            mode: '644'
          with_items: "{{ bash_dotfiles }}"

        - name: Bash history
          copy:
            content: ""
            dest: "{{ dotfiles_folder }}/.bash_history"
            force: no
            mode: '644'

        - name: Link bash dotfiles
          file:
            state: link
            force: yes
            src: "{{ item.filename }}"
            dest: "{{ item.linkname }}"
          with_items:
            - "{{ bash_dotfiles }}"
            - filename: "{{ dotfiles_folder }}/.bash_history"
              linkname: "~/.bash_history"

        - name: Ensure kubectl completion works
          tags:
            - bash
            - k8s
          block:
            - name: Grab "kubectl completion bash" shell output
              command: kubectl completion bash
              register: kubectl_completion_content
            - name: Put kubectl completion into its file
              blockinfile:
                create: yes
                path: "{{ bash_completion_dir }}/kubectl"
                block: "{{ kubectl_completion_content.stdout }}"
          when: ansible_architecture=='x86_64'

    - name: Template git-related files
      tags: git
      block:
        - name: Template projects git dotfiles
          template:
            src: "{{ item.gitconfig }}"
            dest: "{{ dotfiles_folder }}/projects/{{ item.name }}/gitconfig"
            mode: '644'
          loop: "{{ projects_data }}"
          when: item.gitconfig
          loop_control:
            label: "{{ item.name }}"

        - name: Template git dotfiles
          template:
            src: "{{ item.template }}"
            dest: "{{ item.filename }}"
            mode: '644'
          with_items: "{{ git_dotfiles }}"

        - name: Link git dotfiles
          file:
            state: link
            force: yes
            src: "{{ item.filename }}"
            dest: "{{ item.linkname }}"
          with_items:
            - "{{ git_dotfiles }}"
            - filename: "{{ dotfiles_folder }}/.bash_history"
              linkname: "~/.bash_history"

        - name: GPG configuration
          tags:
            - pgp
            - gpg
          ansible.builtin.lineinfile:
            path: ~/.gnupg/gpg-agent.conf
            line: 'pinentry-program /usr/local/bin/pinentry-mac'
          when: ansible_architecture=='x86_64'

        - name: GPG configuration
          tags:
            - pgp
            - gpg
          ansible.builtin.lineinfile:
            path: ~/.gnupg/gpg-agent.conf
            line: 'pinentry-program /opt/homebrew/bin/pinentry-mac'
          when: ansible_architecture=='arm64'


    - name: Configure ssh
      tags:
        - ssh_config
      block:
        - name: Template ssh config
          template:
            src: "ssh/config"
            dest: "{{ dotfiles_folder }}/ssh/config"
        - name: Link ssh config
          file:
            state: link
            src: "{{ dotfiles_folder }}/ssh/config"
            dest: "~/.ssh/config"

    - name: Configure macos defaults
      tags:
        - macos_defaults
      community.general.osx_defaults:
        domain: com.apple.screencapture
        key: location
        type: string
        value: "~/Documents/pictures/screenshots"
        state: present

    - name: Download applications
      tags: never
      get_url:
        url: "{{ item.url }}"
        dest: "{{ temp_folder }}/{{ item.filename }}"
      loop: "{{ applications }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Download dmg_files
      tags: never
      get_url:
        url: "{{ item.url }}"
        dest: "{{ temp_folder }}/{{ item.filename }}"
      loop: "{{ dmg_files }}"
      loop_control:
        label: "{{ item.name }}"
