#!/usr/bin/env ANSIBLE_NOCOWS=1 ansible-playbook
- hosts: localhost
  connection: local
  gather_facts: no
  vars_files:
    - project/project_vars.yaml
  vars:
    - temp_folder: "/tmp/pimp_my_temp"
    - pip3_packages:
      - PyYAML
      - tldr
    - brew_repositories:
      - homebrew/cask-fonts
    - brew_packages:
      # - ansible # why not?
      - autojump
      - awscli
      - bash
      - bash-completion
      - bash-git-prompt
      - ccze
      - coreutils
      - docker-completion
      - docker-compose-completion
      - gh
      - git
      - gpg
      - gradle-completion
      - grc
      - htop
      - httpie
      - jq
      - k9s
      - lynx
      - maven
      - maven-completion
      - mc
      - mdp
      - micro
      - most
      - mtr
      - nano
      - ncdu
      - nmap
      - pip-completion
      - pv
      - tree
      - vagrant-completion
      - watch
      - wget
      - youtube-dl
      - yq
      - diff-so-fancy
      - dty1er/tap/kubecolor
      - bat
      - exa
      - lazygit
      - lsd
      - duf
      - dust
      - rs/tap/curlie
    - brew_casks:
      - vagrant
      - font-hack-nerd-font
    - dmg_files:
      - name: Idea
        url: https://download.jetbrains.com/idea/ideaIC-2019.3.4-jbr8.dmg
        filename: ideaIC-2019.3.4-jbr8.dmg
      - name: keepass
        url: https://github.com/keepassxreboot/keepassxc/releases/download/2.5.4/KeePassXC-2.5.4.dmg
        filename: KeePassXC-2.5.4.dmg
    - applications:
      - name: iTerm
        url: https://iterm2.com/downloads/stable/iTerm2-3_3_9.zip
        filename: iTerm2-3_3_9.zip
        need_unpack: yes
      - name: VSCode
        url: https://go.microsoft.com/fwlink/?LinkID=620882
        filename: vscode.zip
        need_unpack: yes
      # sourcetree
    - vscode_extentions:
      - andyyaldoo.vscode-json #unescape/format json
  tasks:
    - name: Setup needed brew repositories
      tags: brew
      community.general.homebrew_tap:
        name: "{{ brew_repositories }}"
        state: present
    - name: Setup needed brew packages
      tags: brew
      homebrew:
        name: "{{ brew_packages }}"
        state: present
    - name: Setup needed brew casks
      tags: brew
      homebrew_cask:
        name: "{{ brew_casks }}"
        state: present

    - name: Setup needed PIP3 packages
      tags: pip
      pip:
        name: "{{ pip3_packages }}"
        state: present

    - name: Enforce bash shell
      tags:
        - bash_shell
        - never
      block:
        - name: Understand who I am
          tags:
            - bash_shell
          become: false
          command: whoami
          register: raw_whoami
        - name: Ensure bash is set as user shell
          tags:
            - bash_shell
          become: yes
          user:
            name: "{{ raw_whoami.stdout }}"
            shell: /bin/bash

    - name: Populate bash profile
      tags: bash
      block:
        # By default, macos use login shell every time
        # https://apple.stackexchange.com/questions/51036/what-is-the-difference-between-bash-profile-and-bashrc
        # On OS X, Terminal by default runs a login shell every time, so this is a little different to most other systems, but you can configure that in the preferences.
        - name: Template bash_profile
          template:
            src: bash/bash.bashrc
            dest: "~/.bash_profile"
        # Why would we need that?
        # TODO: remove or describe.
        # - name: Link bashrc
        #   file:
        #     src: ~/.bash_profile
        #     dest: ~/.bashrc
        #     state: link
        - name: Make home opt dir
          file:
            dest: ~/opt
            state: directory
        - name: Template GRC resource
          template:
            src: bash/grc.bashrc
            dest: ~/opt/grc.bashrc
        - name: Template inputrc resource (make ctrl-arrows work again)
          template:
            src: bash/inputrc.bashrc
            dest: ~/.inputrc
        - name: Template project bash rc
          template:
            src: project/project.bashrc
            dest: ~/.project.bashrc
        - name: Ensure kubectl completion works
          tags:
            - bash
            - k8s
          block:
            - name: Ensure completion dir is present
              file:
                path: /usr/local/etc/bash_completion.d
                state: directory
            - name: Grab "kubectl completion bash" shell output
              command: kubectl completion bash
              register: kubectl_completion_content
            - name: Put kubectl completion into its file
              blockinfile:
                create: yes
                path: /usr/local/etc/bash_completion.d/kubectl
                block: "{{ kubectl_completion_content.stdout }}"

    - name: Template git-related files
      tags: git
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - src: "git/gitconfig"
          dest: "~/.gitconfig"
        - src: "git/gitignore_global"
          dest: "~/.gitignore_global"
        - src: "git/gitmessage"
          dest: "~/.gitmessage"

    - name: Create temp
      file:
        path: "{{ temp_folder }}"
        state: directory

    - name: Download applications
      tags: never
      get_url:
        url: "{{ item.url }}"
        dest: "{{ temp_folder }}/{{ item.filename }}"
      loop: "{{ applications }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Download dmg_files
      tags: never
      get_url:
        url: "{{ item.url }}"
        dest: "{{ temp_folder }}/{{ item.filename }}"
      loop: "{{ dmg_files }}"
      loop_control:
        label: "{{ item.name }}"
