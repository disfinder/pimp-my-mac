[core]
  editor = code --wait
  excludesfile = ~/.gitignore_global
  pager = diff-so-fancy | less --tabs=4 -RFX
  quotePath = false

[diff]
  tool = meld

[difftool]
  prompt = no

[difftool "meld"]
  trustExitCode = true
  cmd = open -W -a Meld --args --auto-merge \"$LOCAL\" \"$BASE\" \"$REMOTE\" --output=\"$MERGED\"

[diff "ansible-vault"]
	textconv = ansible-vault view
	cachetextconv = false

[alias]
    # basic
    st = status
    s = status -s
    cl = clone
    ci = commit
    co = checkout
    br = branch
    bl = "!git branch --list --color=always | egrep -v 'bak|obsolete'"
    r = reset
    cp = cherry-pick
    gr = grep -Ii
    #
    # tweak defaults
    diff = diff --word-diff
    ds = diff --staged
    branch = branch -ra
    grep = grep -Ii
    bra = branch -ravvv
    ai = add --interactive
    # grep on filename
    f = "!git ls-files | grep -i"
    #
    # commit
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    amend = commit --amend
    caa = commit -a --amend -C HEAD
    can = commit --amend --no-edit
    #
    # log commands
    # ls author committer
    lsac = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [A:%an/C:%cn]" --decorate --date=iso
    ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=iso
    l = ls -10
    lsr = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=relative
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%an]" --decorate --numstat
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%an]"
    fl = log -u
    filelog = log -u
    flist = show --pretty="format:" --name-only
    g = log --graph --oneline --all
    #
    # diff
    d = diff --word-diff
    dc = diff --cached
    # diff last commit
    dlc = diff --cached HEAD^
    dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    #
    # reset commands
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
    #
    # git svn
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit
    #
    # stash
    sl = stash list
    sa = stash apply
    ss = stash save
    #
    # assume aliases
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    # show assumed files
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    # unassume all the assumed files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
    #
    # subtree
    #   add
    sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
    #   update/pull
    sbu = "!f() { git subtree pull --prefix $2 $1 master --squash; }; f"
    #
    # various useful
    # last tag created
    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    # conflict/merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    #list remotes
    rem="!git config -l | grep remote.*url | tail -n +2"

    #apply patch from other local repo
    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    #open files edited in last commit
    #last = "!gvim $(git show HEAD --format="" --name-only | xargs)"
    #last= "!atom $(git show HEAD --format=short --name-only|xargs|awk '{print $10}')"

    # show last commit
    last = "log --format=%B -n 1"
    llast="log -1 HEAD"

    # initial empty commit
    empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"

    # list all aliases
    la = "!git config -l | grep alias | cut -c 7-"
    #
    # convoluted aliases
    # grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
    #rename branch tree to done-
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
    #add bitbucket remote
    ra = "!f() { git remote add $1 https://bitbucket.org/$2.git; }; f"
    #

    ################## another source
    # http://haacked.com/archive/2014/07/28/github-flow-aliases/
    save = !git add -A && git commit -m 'SAVEPOINT'
    wip = commit -am "WIP"
    #up=!git pull --rebase --prune $@ && git submodule update --init --recursive
    up="pull --rebase --prune"

    rw='review'
    rbc="rebase --continue"
    rbi="!f() { git rebase -i HEAD~$1; }; f"
#
[pull]
        default = current
        rebase = true
[push]
        default = current

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =

[mergetool "sourcetree"]
	cmd = /Users/disfinder/Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[commit]
  template = ~/.gitmessage
{% if git_signing_key is defined %}
  gpgsign = true
{% endif %}

[credential]
  helper = !aws codecommit credential-helper $@
  UseHttpPath = true
[interactive]
  diffFilter = diff-so-fancy --patch
[color]
  ui = true
[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22
[color "diff"]
  meta = 11
  frag = magenta bold
  func = 146 bold
  commit = yellow bold
  old = red bold
  new = green
  whitespace = red reverse
[diff-so-fancy]
    useUnicodeRuler = true
    markEmptyLines = false
[color "branch"]
    current = green bold reverse
    local = green
    remote = yellow
[color "status"]
    added = yellow
    untracked = cyan

{% for project in projects_data -%}
{% for includeif in lookup('vars', project.name).git_includeif -%}
[includeIf "gitdir:{{ includeif.dir }}"]
    path = {{ includeif.path }}

{% endfor %}
{% endfor %}
